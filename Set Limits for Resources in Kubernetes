Recently some of the performance issues were observed with some applications hosted on Kubernetes cluster. 
The Nautilus DevOps team has observed some resources constraints where some of the applications are running out of resources like memory, cpu etc., 
and some of the applications are consuming more resources than needed. 
Therefore, the team has decided to add some limits for resources utilization. B

elow you can find more details.


Create a pod named httpd-pod and a container under it named as httpd-container, use httpd image with latest tag only and 
remember to mention tag i.e httpd:latest and set the following limits:

Requests: Memory: 15Mi, CPU: 1

Limits: Memory: 20Mi, CPU: 2

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

solution:
=============


1. create the yml file with below content

Usage:
  kubectl run NAME --image=image [--env="key=value"] [--port=port] [--dry-run=server|client]
[--overrides=inline-json] [--command] -- [COMMAND] [args...] [options]


kubectl run httpd-pod --image=httpd:latest --dry-run=client -o yaml > /home/thor/p.yml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: httpd
  name: httpd-pod
spec:
  containers:
  - image: httpd:latest
    name: httpd-container
    resources: 
        limits:
            memory: "20Mi"
            cpu: "2"
        requests:
             memory: "15Mi"
             cpu: "1"
~                         


 2. to create the pod
    => kubectl create -f pod.yml
 3. to check the pod is running
   => kubectl get pods
 4. to check the limits and requests
   => kubectl describe nodes
  5. kubectl describe nodes 
  Tips: set limits for cpu - shouldn't set 1m and 2m for the CPU, only 1 and 2. for memory use Mi.
  
  partial output of kubectl describe node 
  
    Namespace                   Name                           CPU Requests  CPU Limits  Memory Requests  Memory Limits  AGE
  ---------                   ----                           ------------  ----------  ---------------  -------------  ---
  default                     httpd-pod                      1 (50%)       2 (100%)    15Mi (0%)        20Mi (0%)      46s
  kube-system                 kube-flannel-ds-amd64-kdnxt    100m (5%)     100m (5%)   50Mi (1%)        50Mi (1%)      8m38s
  kube-system                 kube-proxy-2xptx               0 (0%)        0 (0%)      0 (0%)           0 (0%)         8m38s
Allocated resources:
  (Total limits may be over 100 percent, i.e., overcommitted.)
  Resource           Requests     Limits
  --------           --------     ------
  cpu                1100m (55%)  2100m (105%)
  memory             65Mi (1%)    70Mi (1%)
  ephemeral-storage  0 (0%)       0 (0%)
  hugepages-1Gi      0 (0%)       0 (0%)
  hugepages-2Mi      0 (0%)       0 (0%)
  
  

 
 
